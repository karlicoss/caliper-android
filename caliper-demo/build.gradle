buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}


plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}


sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7


sourceSets {
    caliper {
        java {
            srcDir 'src/caliper/java'
        }
    }
}


dependencies {
//    compile libraries.guava

    testCompile libraries.junit

    // add main app code (and its dependencies) to the caliper classpath
    caliperCompile sourceSets.main.output
    caliperCompile configurations.compile
    caliperCompile libraries.caliper
}

/*
    Old versions of Intellij IDEA only had main and test source sets support, and defining a custom source set led to compile errors in IDE.
    IDEA 2016.1 has improved support for difference gradle source sets (see https://blog.jetbrains.com/idea/2016/03/intellij-idea-2016-1-is-here/)
    If you for some reason have to use old version of Intellij IDEA, uncomment the workaround below to make IDE discover your source set dependencies.
 */
//idea.module.scopes.PROVIDED.plus += [ configurations.caliperCompile ]

//project.sourceSets.caliper.output.each {i -> println(i)}


println(project.sourceSets.caliper.output as List)
project.configurations.caliperCompile.each { i -> println(i)}

def everything = (project.sourceSets.caliper.output as List) + (project.configurations.caliperCompile as List)
println(everything)


//println(project.sourceSets.caliper.output as List)

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task packBenchmarksInJar(type: ShadowJar, dependsOn: compileCaliperJava) {
    classifier = "benchmarks"
//    configurations [project.configurations.caliperCompile]
    from everything // project.configurations.caliperCompile, project.sourceSets.caliper.output
}

task dexBenchmarks(type: Exec, dependsOn: packBenchmarksInJar) {
    commandLine('/L/soft/android-sdk-linux/build-tools/23.0.3/dx', '--dex', '--output=result.jar', packBenchmarksInJar.archivePath)
}

task pushOnDevice(type: Exec, dependsOn: dexBenchmarks) {
    commandLine 'adb', 'push', 'result.jar', '/sdcard/caliper.jar'
}

task runCaliperOnDevice(type: Exec, dependsOn: pushOnDevice) {
    commandLine 'adb', 'shell', 'dalvikvm', '-cp', '/sdcard/caliper.jar', 'benchmarks.DemoBenchmark'
}

//shadowJar {
//    classifier = "caliper"
//    manifest {
//        attributes 'Implementation-Title' : 'Example of Caliper benchmark on Android' //,
////                   'Main-Class'           : 'benchmarks.DemoBenchmark'
//    }
//
//    configurations = [project.configurations.caliperRuntime]
////    configurations = []
////    from project.sourceSets.caliper.output
//}


//shadowJar.properties.each { i -> println(i) }



task runCaliper(type: JavaExec, dependsOn: compileCaliperJava) {
//    def vmVer = System.getProperty('java.version')
//    def osName = System.getProperty('os.name').replaceAll('\\s','')
//    def osArch = System.getProperty('os.arch')
//    def fnameBase = "ver${version}_${osName}-${osArch}_jvm${vmVer}"
//    def benchMarksDir = "${project.buildDir}/benchmarks"
//    ant.mkdir(dir: benchMarksDir)
//    def outStream = new FileOutputStream("${benchMarksDir}/${fnameBase}-out.txt")
//    standardOutput = outStream
    classpath = sourceSets.caliper.runtimeClasspath
    print(classpath)
    main = 'benchmarks.DemoBenchmark'
//    args = ['--saveResults', "${benchMarksDir}/${fnameBase}.json", '-Jmode=-server,-client']
}