apply plugin: 'com.android.application'



//plugins {
//    id 'com.android.application' version '2.1.0'
//    id 'java'
//    id 'idea'
//    id 'com.github.johnrengelman.shadow' version '1.2.3'
//}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.github.karlicoss.caliper.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }


    sourceSets {
        /*
            We define a separate source set for benchmarks code, so it doesn't get mixed with app code.
            That way, we can provide it with different dependencies as well.
         */
        caliper {
            java {
                srcDir 'src/caliper/java'
            }
        }
    }
}


sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7


//def String configurationName = 'caliper'
//def Configuration conf = project.configurations.create(configurationName).extendsFrom(
//        project.configurations.getByName('compile'),
//        project.configurations.getByName('provided')
//)


dependencies {
//    compile libraries.guava

    testCompile libraries.junit

    /**
     * Now, we add main app code (and its depencencies to the caliper classpath)
     *
     * I wonder if there is a nicer way to do it, please tell if you know!
     */
//    caliperCompile sourceSets.main.output
//    caliperCompile configurations.compile
    caliperCompile libraries.caliper
}


/*
    Old versions of Intellij IDEA only had main and test source sets support, and defining a custom source set led to compile errors in IDE.
    IDEA 2016.1 has improved support for difference gradle source sets (see https://blog.jetbrains.com/idea/2016/03/intellij-idea-2016-1-is-here/)
    If you for some reason have to use old version of Intellij IDEA, uncomment the workaround below to make IDE discover your source set dependencies.
 */
//idea.module.scopes.PROVIDED.plus += [ configurations.caliperCompile ]

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import com.android.build.gradle.api.AndroidSourceSet
import com.android.build.gradle.AppExtension
import groovy.transform.TypeChecked

@TypeChecked
void alala(Project project) {
    def AndroidSourceSet sset = project.extensions.getByType(AppExtension).sourceSets.getByName('caliper')
    println(sset.java.srcDirs)
}

//alala(project)

//project.configurations.caliperCompile.extendsFrom(project.configurations.compile)

//println(project.configurations.caliperCompile.dependencies as List)

//println(project.configurations.compile.all[0].cla)


project.afterEvaluate {
    android.applicationVariants.all { variant ->

        def JavaCompile javaCompileTask = variant.javaCompile

        Task compileCaliperTask = project.task("compileCaliper${variant.name}", type: JavaCompile) {
            source = project.extensions.getByType(AppExtension).sourceSets.getByName('caliper').java.srcDirs
            classpath = project.files(javaCompileTask.destinationDir, project.configurations.caliperCompile) // .classpath // , project.configurations.compile.classpath]
            destinationDir = file('/L/tmp/compile/')
        }


        Task packBenchmarks = project.task("packBenchmarksInJar${variant.name}", type: ShadowJar, dependsOn: [javaCompileTask, compileCaliperTask]) {
            classifier = "benchmarks"
            from compileCaliperTask.destinationDir, project.configurations.caliperCompile, javaCompileTask.destinationDir
        }

        Task dexBenchmarks = project.task("dexBenchmarks${variant.name}", type: Exec, dependsOn: packBenchmarks) {
            commandLine('/L/soft/android-sdk-linux/sdk/build-tools/23.0.2/dx', '--dex', '--output=result.jar', packBenchmarks.archivePath)
        }

        Task pushOnDevice = project.task("pushOnDevice${variant.name}", type: Exec, dependsOn: dexBenchmarks) {
            commandLine 'adb', 'push', 'result.jar', '/sdcard/caliper.jar'
        }
//
        Task runOnDevice = project.task("runCaliperOnDevice${variant.name}", type: Exec, dependsOn: pushOnDevice) {
            commandLine 'adb', 'shell', 'dalvikvm', '-cp', '/sdcard/caliper.jar', '-Dos.name=Linux', 'benchmarks.DemoBenchmark'
        }
//        configureVariant(project, conf, variant)
    }
}





//
//
//task runCaliperLocally(type: JavaExec, dependsOn: compileCaliperJava) {
////    def vmVer = System.getProperty('java.version')
////    def osName = System.getProperty('os.name').replaceAll('\\s','')
////    def osArch = System.getProperty('os.arch')
////    def fnameBase = "ver${version}_${osName}-${osArch}_jvm${vmVer}"
////    def benchMarksDir = "${project.buildDir}/benchmarks"
////    ant.mkdir(dir: benchMarksDir)
////    def outStream = new FileOutputStream("${benchMarksDir}/${fnameBase}-out.txt")
////    standardOutput = outStream
//    classpath = sourceSets.caliper.runtimeClasspath
//    main = 'benchmarks.DemoBenchmark'
////    args = ['--saveResults', "${benchMarksDir}/${fnameBase}.json", '-Jmode=-server,-client']
//}